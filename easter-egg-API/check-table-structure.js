import { query } from './config/database.js';

async function checkTableStructure() {
  try {
    console.log('üîç Ê£ÄÊü•Êï∞ÊçÆÂ∫ìË°®ÁªìÊûÑ...\n');
    
    const tables = ['egg_games', 'egg_movies', 'egg_tv', 'egg_news'];
    
    for (const table of tables) {
      console.log(`\nüìã ${table} Ë°®ÁªìÊûÑ:`);
      console.log('‚îÅ'.repeat(50));
      
      // Êü•ËØ¢Ë°®ÁªìÊûÑ
      const result = await query(`
        SELECT column_name, data_type, is_nullable
        FROM information_schema.columns
        WHERE table_name = $1
        ORDER BY ordinal_position
      `, [table]);
      
      result.rows.forEach(col => {
        console.log(`  ${col.column_name.padEnd(25)} ${col.data_type.padEnd(20)} ${col.is_nullable}`);
      });
      
      // Êü•ËØ¢‰∏ÄÊù°Á§∫‰æãÊï∞ÊçÆ
      const sampleResult = await query(`SELECT * FROM ${table} LIMIT 1`);
      if (sampleResult.rows.length > 0) {
        console.log('\n  Á§∫‰æãÊï∞ÊçÆÂ≠óÊÆµ:');
        Object.keys(sampleResult.rows[0]).forEach(key => {
          const value = sampleResult.rows[0][key];
          const valuePreview = typeof value === 'string' ? value.substring(0, 50) : JSON.stringify(value);
          console.log(`    ${key}: ${valuePreview}`);
        });
      }
    }
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Ê£ÄÊü•Â§±Ë¥•:', error);
    process.exit(1);
  }
}

checkTableStructure();


